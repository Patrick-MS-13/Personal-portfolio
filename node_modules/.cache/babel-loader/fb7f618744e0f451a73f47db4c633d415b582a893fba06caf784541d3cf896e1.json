{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Portfolio/portfolio/src/components/ThemeToggle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./../style/ThemeToggle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeToggle = () => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // Check and set the initial theme based on localStorage\n  useEffect(() => {\n    const currentTheme = localStorage.getItem(\"theme\");\n    if (currentTheme) {\n      document.body.classList.toggle(\"dark-mode\", currentTheme === \"dark\");\n      setIsDarkMode(currentTheme === \"dark\");\n    }\n  }, []);\n  const handleToggle = () => {\n    const newTheme = !isDarkMode ? \"dark\" : \"light\";\n    document.body.classList.toggle(\"dark-mode\", newTheme === \"dark\");\n    localStorage.setItem(\"theme\", newTheme);\n    setIsDarkMode(!isDarkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"top\",\n    children: /*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mode\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: `fas ${isDarkMode ? \"fa-moon\" : \"fa-sun\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: isDarkMode,\n            onChange: handleToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"toggle-circle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeToggle, \"bUs4CHDjU8AH+ZZYt8wlh4bHppI=\");\n_c = ThemeToggle;\nexport default ThemeToggle;\nvar _c;\n$RefreshReg$(_c, \"ThemeToggle\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ThemeToggle","_s","isDarkMode","setIsDarkMode","currentTheme","localStorage","getItem","document","body","classList","toggle","handleToggle","newTheme","setItem","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Portfolio/portfolio/src/components/ThemeToggle.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./../style/ThemeToggle.css\"; \nconst ThemeToggle = () => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // Check and set the initial theme based on localStorage\n  useEffect(() => {\n    const currentTheme = localStorage.getItem(\"theme\");\n    if (currentTheme) {\n      document.body.classList.toggle(\"dark-mode\", currentTheme === \"dark\");\n      setIsDarkMode(currentTheme === \"dark\");\n    }\n  }, []);\n\n  const handleToggle = () => {\n    const newTheme = !isDarkMode ? \"dark\" : \"light\";\n    document.body.classList.toggle(\"dark-mode\", newTheme === \"dark\");\n    localStorage.setItem(\"theme\", newTheme);\n    setIsDarkMode(!isDarkMode);\n  };\n\n  return (\n    <div id=\"top\">\n      {/* Nav */}\n      <nav>\n        <div className=\"mode\">\n          <i className={`fas ${isDarkMode ? \"fa-moon\" : \"fa-sun\"}`}></i>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={isDarkMode}\n              onChange={handleToggle}\n            />\n            <span className=\"toggle-circle\"></span>\n          </label>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default ThemeToggle;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACpC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACAD,SAAS,CAAC,MAAM;IACd,MAAMQ,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAClD,IAAIF,YAAY,EAAE;MAChBG,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEN,YAAY,KAAK,MAAM,CAAC;MACpED,aAAa,CAACC,YAAY,KAAK,MAAM,CAAC;IACxC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,QAAQ,GAAG,CAACV,UAAU,GAAG,MAAM,GAAG,OAAO;IAC/CK,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEE,QAAQ,KAAK,MAAM,CAAC;IAChEP,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;IACvCT,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;EAED,oBACEH,OAAA;IAAKe,EAAE,EAAC,KAAK;IAAAC,QAAA,eAEXhB,OAAA;MAAAgB,QAAA,eACEhB,OAAA;QAAKiB,SAAS,EAAC,MAAM;QAAAD,QAAA,gBACnBhB,OAAA;UAAGiB,SAAS,EAAE,OAAOd,UAAU,GAAG,SAAS,GAAG,QAAQ;QAAG;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9DrB,OAAA;UAAAgB,QAAA,gBACEhB,OAAA;YACEsB,IAAI,EAAC,UAAU;YACfC,OAAO,EAAEpB,UAAW;YACpBqB,QAAQ,EAAEZ;UAAa;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxB,CAAC,eACFrB,OAAA;YAAMiB,SAAS,EAAC;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnB,EAAA,CArCID,WAAW;AAAAwB,EAAA,GAAXxB,WAAW;AAuCjB,eAAeA,WAAW;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}